import numpy as np
from math import tan, pi, sqrt

# K-means Clustering Algorithm
def kmeans(points, k, max_iterations=100):
    # Randomly choose initial centroids
    centroids = points[np.random.choice(points.shape[0], k, replace=False)]
    
    for _ in range(max_iterations):
        # Assign points to the nearest centroid
        distances = np.sqrt(((points - centroids[:, np.newaxis])**2).sum(axis=2))
        closest_centroids = np.argmin(distances, axis=0)
        
        # Calculate new centroids
        new_centroids = np.array([points[closest_centroids == i].mean(axis=0) for i in range(k)])
        
        # Check for convergence
        if np.all(centroids == new_centroids):
            break
        
        centroids = new_centroids
    
    return centroids, closest_centroids

# Polygon Area Calculation Functions
def calculate_apothem(side_length, num_sides):
    return side_length / (2 * tan(pi / num_sides))

def calculate_polygon_area(side_length, num_sides):
    apothem = calculate_apothem(side_length, num_sides)
    perimeter = num_sides * side_length
    area = (1/2) * perimeter * apothem
    return area

def calculate_polygon_area_direct(side_length, num_sides):
    return (num_sides * side_length**2) / (4 * tan(pi / num_sides))

# Example usage
if __name__ == "__main__":
    # Example points
    points = np.array([
        [1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6], [9, 11]
    ])

    # Perform K-means clustering
    k = 2
    centroids, clusters = kmeans(points, k)

    print("Centroids:", centroids)
    print("Cluster assignments:", clusters)

    # Example for polygon area calculation
    side_length = 5
    num_sides = 6  # Example for a hexagon

    apothem = calculate_apothem(side_length, num_sides)
    area = calculate_polygon_area(side_length, num_sides)
    direct_area = calculate_polygon_area_direct(side_length, num_sides)

    print(f"Apothem of the polygon: {apothem}")
    print(f"Area of the polygon (using perimeter and apothem): {area}")
    print(f"Area of the polygon (using direct formula): {direct_area}")

    Code Explanation for "K Means Clustering with Polygon Area Calculation"

    Imports:

    import numpy as np
    from math import tan, pi, sqrt

               numpy: A powerful library for numerical computations
               math.tan, math.pi, math.sqrt: Functions from the math library to perform tangent, get the value of pi, and square root calculations, respectively.

K-means Clustering Algorithm:

def kmeans(points, k, max_iterations=100):
    # Randomly choose initial centroids
    centroids = points[np.random.choice(points.shape[0], k, replace=False)]

            kmeans: Function to perform K-means clustering.
            points: Array of data points to cluster.
            k: Number of clusters.
            max_iterations: Maximum number of iterations for the algorithm to run.
            centroids: Initial centroids chosen randomly from the points.

                for _ in range(max_iterations):
        # Assign points to the nearest centroid
        distances = np.sqrt(((points - centroids[:, np.newaxis])**2).sum(axis=2))
        closest_centroids = np.argmin(distances, axis=0)

          distances: Compute the Euclidean distance between each point and the centroids.
          closest_centroids: Assign each point to the nearest centroid.

        # Calculate new centroids
        new_centroids = np.array([points[closest_centroids == i].mean(axis=0) for i in range(k)])

        new_centroids: Calculate the new centroids by averaging the points assigned to each centroid.

                # Check for convergence
        if np.all(centroids == new_centroids):
            break
        centroids = new_centroids

       Convergence Check: If the centroids do not change, the algorithm has converged and breaks out of the loop.

           return centroids, closest_centroids

       Return: Final centroids and the cluster assignments of the points.

       Polygon Area Calculation Functions:

       def calculate_apothem(side_length, num_sides):
         return side_length / (2 * tan(pi / num_sides))

         calculate_apothem: Calculates the apothem (inradius) of a regular polygon.
         side_length: Length of a side of the polygon.
         num_sides: Number of sides of the polygon.
         Returns: The apothem of the polygon.

      def calculate_polygon_area(side_length, num_sides):
        apothem = calculate_apothem(side_length, num_sides)
        perimeter = num_sides * side_length
        area = (1/2) * perimeter * apothem
        return area

    calculate_polygon_area: Calculates the area of a regular polygon using the apothem and perimeter.
    apothem: Calculated using the previous function.
    perimeter: Product of the number of sides and the side length.
    area: Area of the polygon using the formula 1/2×perimeter×apothem

​def calculate_polygon_area_direct(side_length, num_sides):
    return (num_sides * side_length**2) / (4 * tan(pi / num_sides))

          calculate_polygon_area_direct: Directly calculates the area of a regular polygon using the side length and number of sides.

   Example Usage:

   if __name__ == "__main__":
    # Example points
    points = np.array([
        [1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6], [9, 11]
    ])

         points: Example dataset consisting of 6 points in 2D space.

             # Perform K-means clustering
    k = 2
    centroids, clusters = kmeans(points, k)

    print("Centroids:", centroids)
    print("Cluster assignments:", clusters)

         k: Number of clusters (2 in this case).
         centroids, clusters: Results from the K-means clustering.
         Output: Print the final centroids and the cluster assignments.

    # Example for polygon area calculation
    side_length = 5
    num_sides = 6  # Example for a hexagon

       side_length: Length of a side of the polygon (hexagon in this case).
       num_sides: Number of sides of the polygon (6 for a hexagon).

           apothem = calculate_apothem(side_length, num_sides)
           area = calculate_polygon_area(side_length, num_sides)
           direct_area = calculate_polygon_area_direct(side_length, num_sides)

           print(f"Apothem of the polygon: {apothem}")
           print(f"Area of the polygon (using perimeter and apothem): {area}")
           print(f"Area of the polygon (using direct formula): {direct_area}")

      apothem: Apothem of the polygon.
      area: Area calculated using the perimeter and apothem.
      direct_area: Area calculated using the direct formula.
      Output: Print the apothem and the area using both methods. 
