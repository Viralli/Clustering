# Importing necessary libraries
import math

# Define the dataset
points = [(1, 2), (1.5, 1.8), (5, 8), (8, 8), (1, 0.6), (9, 11)]

# Number of clusters (K)
K = 2

# Initialize centroids (randomly chosen from points)
centroid1 = (1, 2)
centroid2 = (5, 8)

# Function to calculate Euclidean distance
def euclidean_distance(point1, point2):
    return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)

# Function to assign points to clusters
def assign_clusters(points, centroid1, centroid2):
    cluster1 = []
    cluster2 = []
    
    for point in points:
        dist_to_c1 = euclidean_distance(point, centroid1)
        dist_to_c2 = euclidean_distance(point, centroid2)
        
        if dist_to_c1 < dist_to_c2:
            cluster1.append(point)
        else:
            cluster2.append(point)
    
    return cluster1, cluster2

# Function to update centroids
def update_centroids(cluster1, cluster2):
    centroid1 = (sum([point[0] for point in cluster1]) / len(cluster1),
                 sum([point[1] for point in cluster1]) / len(cluster1))
    
    centroid2 = (sum([point[0] for point in cluster2]) / len(cluster2),
                 sum([point[1] for point in cluster2]) / len(cluster2))
    
    return centroid1, centroid2

# Print initial centroids
print("Initial Centroids:")
print("Centroid 1:", centroid1)
print("Centroid 2:", centroid2)
print()

# Step-by-step K-Means process
for iteration in range(1, 4):  # Perform 3 iterations (you can adjust as needed)
    print(f"Iteration {iteration}:")
    
    # Assign points to clusters
    cluster1, cluster2 = assign_clusters(points, centroid1, centroid2)
    print("Cluster 1:", cluster1)
    print("Cluster 2:", cluster2)
    
    # Update centroids
    centroid1, centroid2 = update_centroids(cluster1, cluster2)
    print("Updated Centroid 1:", centroid1)
    print("Updated Centroid 2:", centroid2)
    print("--------------------------------------------------")
    
# Final clusters and centroids after iterations
print("Final Clusters:")
print("Cluster 1:", cluster1)
print("Cluster 2:", cluster2)
print("Final Centroids:")
print("Centroid 1:", centroid1)
print("Centroid 2:", centroid2)
print()
print("=== Code Execution Successful ===")

Code Explanation:

This code implements the K-Means clustering algorithm. Hereâ€™s a brief explanation of each part:

1. Import necessary libraries:

import math

This imports the `math` library to use the square root function for calculating Euclidean distance.

2. Define the dataset:

points = [(1, 2), (1.5, 1.8), (5, 8), (8, 8), (1, 0.6), (9, 11)]

A list of points in a 2D space is defined.

3. Number of clusters (K):

K = 2

The number of clusters is set to 2.

4. Initialize centroids:

centroid1 = (1, 2)
centroid2 = (5, 8)

Initial centroids are chosen from the dataset points.

5. Function to calculate Euclidean distance:

def euclidean_distance(point1, point2):
    return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)

This function computes the Euclidean distance between two points.

6. Function to assign points to clusters:

def assign_clusters(points, centroid1, centroid2):
    cluster1 = []
    cluster2 = []
    
    for point in points:
        dist_to_c1 = euclidean_distance(point, centroid1)
        dist_to_c2 = euclidean_distance(point, centroid2)
        
        if dist_to_c1 < dist_to_c2:
            cluster1.append(point)
        else:
            cluster2.append(point)
    
    return cluster1, cluster2

This function assigns each point to the nearest centroid, creating two clusters.

7. Function to update centroids:

def update_centroids(cluster1, cluster2):
    centroid1 = (sum([point[0] for point in cluster1]) / len(cluster1),
                 sum([point[1] for point in cluster1]) / len(cluster1))
    
    centroid2 = (sum([point[0] for point in cluster2]) / len(cluster2),
                 sum([point[1] for point in cluster2]) / len(cluster2))
    
    return centroid1, centroid2

This function calculates the new centroids by averaging the points in each cluster.

8. Print initial centroids:

print("Initial Centroids:")
print("Centroid 1:", centroid1)
print("Centroid 2:", centroid2)
print()

The initial centroids are printed.

9. Step-by-step K-Means process:

for iteration in range(1, 4):  # Perform 3 iterations (you can adjust as needed)
    print(f"Iteration {iteration}:")
    
    # Assign points to clusters
    cluster1, cluster2 = assign_clusters(points, centroid1, centroid2)
    print("Cluster 1:", cluster1)
    print("Cluster 2:", cluster2)
    
    # Update centroids
    centroid1, centroid2 = update_centroids(cluster1, cluster2)
    print("Updated Centroid 1:", centroid1)
    print("Updated Centroid 2:", centroid2)
    print("--------------------------------------------------")

This loop performs the K-Means clustering algorithm for 3 iterations. For each iteration:

    Points are assigned to the nearest centroid, forming clusters.
    Centroids are updated based on the mean of the points in each cluster.
    The clusters and updated centroids are printed.

10. Final clusters and centroids after iterations:

print("Final Clusters:")
print("Cluster 1:", cluster1)
print("Cluster 2:", cluster2)
print("Final Centroids:")
print("Centroid 1:", centroid1)
print("Centroid 2:", centroid2)
print()
print("=== Code Execution Successful ===")

After completing the iterations, the final clusters and centroids are printed, indicating the end of the code execution.
